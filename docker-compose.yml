services:
  fleet:
    build:
      context: .
      dockerfile: ./apps/fleet/Dockerfile
      target: development
    command: npm run start:dev fleet
    env_file:
      - ./apps/fleet/.env
    depends_on:
      - mongo
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'

  heartbeats:
    build:
      context: .
      dockerfile: ./apps/heartbeats/Dockerfile
      target: development
    command: npm run start:dev heartbeats
    env_file:
      - ./apps/heartbeats/.env
    depends_on:
      - mongo
      - rabbitmq
      - penalty-points
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3001:3001'

  penalty-points:
    build:
      context: .
      dockerfile: ./apps/penalty_points/Dockerfile
      target: development
    command: npm run start:dev penalty_points
    env_file:
      - ./apps/penalty_points/.env
    depends_on:
      - mongo
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  rabbitmq:
    image: rabbitmq
    ports:
      - '5672:5672'

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

volumes:
  mongodb_data_container: